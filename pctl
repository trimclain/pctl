#!/usr/bin/env bash
#
# pctl: a simple tool to manage your projects
#
# Author: @trimclain
# License: GPL-3.0

# shellcheck disable=SC2155,SC2164
# Disabled:
# "Declare and assign separately to avoid masking return values":
#  https://www.shellcheck.net/wiki/SC2155
# "Use 'pushd ... || exit' or 'pushd ... || exit' in case pushd fails":
#  https://www.shellcheck.net/wiki/SC2164

readonly VERSION="v0.1.0"

readonly GREEN='\e[0;32m'
readonly BLUE='\e[0;34m'
readonly RED='\e[0;31m'
readonly PURPLE="\e[0;35m"
# readonly CYAN="\e[1;36m"
readonly RESET='\e[0m'

readonly PCTL_SHARE="$HOME/.local/share/pctl"
readonly CURRENT_USER=$(whoami)

if [[ -z $PROJECTLIST ]]; then
    readonly PROJECTLIST="$PCTL_SHARE/projectlist"
    if [[ ! -f $PROJECTLIST ]]; then
        mkdir -p "$PCTL_SHARE"
        touch "$PROJECTLIST"
    fi
fi

# Migration Info:
# csv columns: project_location, github repo owner (default: $USER)
if ! grep -q ',' "$PROJECTLIST"; then
    echo -e "${RED}Error:${RESET} $PROJECTLIST isn't a CSV. ${BLUE}Migrate${RESET} to continue."
    exit 1
fi

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        echo "Error: $1 not found"
        exit 1
    fi
}

# Idea:
#                         MESSAGE_LENGTH
#                               |
# (-------------------------------------------------------------)
# -------------------------> pctl <-----------------------------
# (------------------------)
#            |
#      LEFT_LENGTH

readonly MESSAGE_LENGTH=60
readonly LEFT_LENGTH=25

# Produce the following:
# -------------------------> <text> <-----------------------------
center_text() {
    local text="$1"
    local text_length=${#text}
    local right_length=$((MESSAGE_LENGTH - 2 - text_length - LEFT_LENGTH))

    local left=$(printf "%-${LEFT_LENGTH}s" "" | tr ' ' '-')
    local right=$(printf "%-${right_length}s" "" | tr ' ' '-')
    printf "%s> ${PURPLE}%s${GREEN} <%s" "$left" "$text" "$right"

}

show_status() {
    while IFS=, read -r project _; do
        local project_name="${project##*/}"
        local formatted_line=$(center_text "$project_name")

        if [ -d "$project/.git" ]; then
            echo -e "${GREEN}${formatted_line}${RESET}"

            if [[ -n $(git -C "$project" status --porcelain) ]]; then
                git -C "$project" status
            else
                echo "Nothing to commit"
            fi
        fi
    done < "$PROJECTLIST"
}

pull_updates() {
    while IFS=, read -r project _; do
        local project_name="${project##*/}"
        local formatted_line=$(center_text "$project_name")

        if [ -d "$project/.git" ]; then
            echo -e "${GREEN}${formatted_line}${RESET}"

            #######################################################################
            # TODO: should I fetch to make sure it's latest? Was that the problem?
            # UPSTREAM=${1:-'@{u}'}
            # LOCAL=$(git rev-parse @)
            # REMOTE=$(git rev-parse "$UPSTREAM")
            # BASE=$(git merge-base @ "$UPSTREAM")
            # if [ $LOCAL = $REMOTE ]; then
            #     echo "Up-to-date"
            # elif [ $LOCAL = $BASE ]; then
            #     echo "Pulling updates..."
            #     git pull
            # elif [ $REMOTE = $BASE ]; then
            #     echo "Pushing updates..."
            #     git push
            # else
            #     echo "Diverged"
            # fi
            #######################################################################

            git -C "$project" pull &
        fi
    done < "$PROJECTLIST"
    wait
}

add_project() {
    local project=$(pwd)
    local project_name="${project##*/}"
    # check if project already in the list
    if grep -q "$project" "$PROJECTLIST"; then
        echo -e "Project ${BLUE}$project_name${RESET} is already in the list ${RED}${RESET}"
    else
        local gh_repo_owner
        if [[ -n "$1" ]]; then
            gh_repo_owner="$1"
        else
            echo -en "Enter ${BLUE}github repo owner${RESET} (default: $CURRENT_USER): "
            read -r gh_repo_owner
            gh_repo_owner=${gh_repo_owner:-$CURRENT_USER}
        fi
        echo "$project,$gh_repo_owner" >> "$PROJECTLIST"
        echo -en "Adding ${BLUE}$project_name${RESET} with owner ${BLUE}$gh_repo_owner${RESET} to the list "
        echo -e "${GREEN}󰄴${RESET}"
    fi
}

get_project() {
    ensure_installed fzf

    # filter out installed projects
    local project=$(while IFS=, read -r line _; do
        if [ ! -d "$line" ]; then
            echo "$line"
        fi
    done < "$PROJECTLIST" | fzf --cycle --bind 'tab:toggle-up,btab:toggle-down')

    if [[ -z $project ]]; then
        return 0
    fi

    local project_name="${project##*/}"
    local project_dir="${project%/*}"
    local gh_repo_owner=$(awk -F, -v selected="$project" '$1 == selected {print $2}' "$PROJECTLIST")

    if [[ ! -d $project_dir ]]; then
        mkdir -p "$project_dir"
    fi

    echo -en "Cloning ${BLUE}$project_name${RESET} "
    git clone --quiet git@github.com:"$gh_repo_owner/$project_name" "$project" > /dev/null
    # INFO: requires a Nerd Font
    echo -e "${GREEN}󰄴${RESET}"
}

open_in_tmux() {
    ensure_installed fzf
    ensure_installed tmux

    local selected
    if [[ -n "$1" ]]; then
        selected=$1
    else
        selected=$(
            while IFS=, read -r line _; do
                if [[ -d "$line" ]]; then
                    echo "$line"
                fi
            done < "$PROJECTLIST" |
                sed "s|$HOME/\(.*\)|\1|" |
                fzf --cycle --bind 'tab:toggle-up,btab:toggle-down'
        )
    fi

    if [[ -z $selected ]]; then
        exit 0
    fi

    # make selected back to fullpath
    # if [[ ! -d $selected ]]; then
    if [[ ! $selected == $HOME/* ]]; then
        selected=$HOME/$selected
    fi
    local selected_name=$(basename "$selected" | tr . _)

    # Tmux not running or detached:
    # the -A flag makes new-session behave like attach-session if session-name
    # already exists
    if [[ -z $TMUX ]]; then
        tmux new-session -A -s "$selected_name" -c "$selected"
        exit 0
    fi

    # the -d flag makes tmux detach from a session and then creates new one
    # with the name given after -s flag
    if ! tmux has-session -t="$selected_name" 2> /dev/null; then
        tmux new-session -ds "$selected_name" -c "$selected"
    fi

    tmux switch-client -t "$selected_name"
}

display_help() {
    cat << EOF
Usage:
  pctl [command]

COMMANDS:
  h, help               Show this help message
  v, version            Print pctl version
  s, status             Show the status of all projects
  p, pull               Pull updates in all projects
  g, get                Clone a project from github
  a, add [owner]        Add current project to the list (optional: pass github repo owner)
  o, open [project]     Open a project in a new tmux session (optional: pass project name)
EOF
}

main() {
    if [[ $# -eq 0 ]]; then
        display_help
        exit 0
    fi
    local cmd="$1"
    case $cmd in
        "help" | "h" | "-h" | "--help") display_help && exit 0 ;;
        "version" | "v") echo "pctl $VERSION" && exit 0 ;;
        "status" | "s") show_status && exit 0 ;;
        "pull" | "p") pull_updates && exit 0 ;;
        "get" | "g") get_project && exit 0 ;;
        "add" | "a") add_project "$2" && exit 0 ;;
        "open" | "o") open_in_tmux "$2" && exit 0 ;;
        *) echo "Unknown command: $cmd" && exit 1 ;;
    esac
}

main "$@"
